---
- name: ensure prerequisites
  import_tasks: prerequisites.yml

- name: import lxc image built with distrobuilder
  import_role:
    name: distrobuilder

- name: import custom base image
  block:
    - name: delete previous image (if exists)
      # '|| true' required so ansible doesn't fail if image does not exist
      raw: lxc image delete {{ imageName }} || true
    - name: import new image
      command: lxc image import {{ imageArtifacts }}/lxd.tar.xz {{ imageArtifacts }}/rootfs.squashfs --alias {{ imageName }}

- name: create lxd profile
  lxd_profile:
    name: '{{ profileName }}'
    # config: "{{ dict((lookup('file', 'lxd-profile-devices.yaml') | to_yaml)) }}"
    config:
      'boot.autostart': 'true'
      'boot.host_shutdown_timeout': '20'
      'limits.cpu.allowance': '50%'
      'limits.cpu.priority': '10' # default
      'limits.disk.priority': '7'
      'limits.memory': '50%'
      'limits.memory.enforce': 'soft'
      'limits.memory.swap': 'true'
      'limits.memory.swap.priority': '10' # default
      'limits.network.priority': '3'
      'security.nesting': 'false'
    devices:
      root:
        type: disk
        pool: default
        path: /
      br0:
        type: nic
        nictype: bridged
        parent: br0

# TODO: use 100000 | random | to_uuid | upper
- name: create containers
  block:
    - name: generate unique ids
      # uuidgen not in util-linux for debian stretch...
      shell: dbus-uuidgen
      with_sequence: count={{ containerNames | length }}
      register: uuid_list
    - name: debug
      debug:
        msg: '{{ uuid_list.results}}'
        verbosity: 3
    - name: create lxd containers
      lxd_container:
        name: '{{ containerNamePrefix }}{{ item }}'
        architecture: x86_64
        config:
          'user.fqdn': '{{ item }}.{{ domainName }}'
          'user.hostname': '{{ item }}'
          'user.user-data': "{{ lookup('template', 'user-data.yaml.j2') }}"
          'user.meta-data': "{{ lookup('template', 'meta-data.yaml.j2') }}"
        ephemeral: no
        source:
          type: image
          mode: pull
          protocol: lxd
          alias: '{{ imageName }}'
        profiles:
          - '{{ profileName }}'
        wait_for_ipv4_addresses: yes
        state: started
      loop: '{{ containerNames }}'
      loop_control:
        index_var: i
      # TODO: fix error
      # error causes lxd daemon to
      # crash and restart
      ignore_errors: yes
